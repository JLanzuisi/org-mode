# -*- eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t) -*-
#+TITLE: Configuración de emacs
#+AUTHOR: Jhonny Lanzuisi
#+TAGS: :emacs:init:
#+LATEX_CLASS: article
#+PROPERTY: header-args :exports code :tangle ~/.emacs.d/init-test.el
#+SETUPFILE: /home/jhonny/git/org-mode/style.css.org
#+LATEX_HEADER: \lstset{language=Lisp}\asignatura{Emacs Lisp}

# ----LICENSE---
# Copyright 2021 Jhonny Lanzuisi (jalb97@gmail.com)
# More source files at github.com/JLanzuisi
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# --------------

* Configurar emacs usando Org-mode

La idea es configurar emacs usando org-mode.
Org-mode permite escribir el código mezclado con texto,
de tal forma que documentar el código es más sencillo.
Además, es más fácil recordar en el futuro que significa alguna pieza de la contiguración si puedo leer lo que pensaba en el momento.

El archivo =init.el= de configración se crea a partir de un =emcas-init.org= usando =org-babel-tangle=.
Por ahora, no es más que una recopilación de cosas que tomo de otras configuraciones o que descubro en el manual de emacs.

Para poder crear el archivo =init.el=, uso la siguiente linea al inicio del archivo =.org=,
que permite cargar [[* Variables locales][variables locales]]. 
Con esta linea se ejecuta la operación de tangle cada vez que se guarda el archivo.

#+NAME: cblk-tangle-on-save
#+BEGIN_SRC emacs-lisp :tangle no
# -*- eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t) -*-
#+END_SRC

Además, la siguiente linea hace que sea más conveniente escribir el código en el archivo =.org=,
pues establece ciertas opciones que quiero por defecto en practicamente todos los bloques de código.

#+BEGIN_SRC emacs-lisp :tangle no
#+PROPERTY: header-args :exports code :tangle ~/.emacs.d/init-test.el
#+END_SRC

#+BEGIN_SRC emacs-lisp :exports none
  ;; This init.el file is tangled from an Org file.
  ;; As such, it's documentation will be terse or non-existent.
  ;; For more in-depth, look at the Org or HTML files associated with it.
#+END_SRC

* Apariencia general
Estos primeros comando se encargar de desactivar ciertos elementos que vienen por defecto en la interfaz de emacs.
Los nombres de las variables se explican a si mismos, así que no hay mucho más que decir.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)          ; Disable the menu bar
(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room
(setq visible-bell t)
#+END_SRC

** Números en la líneas
Los números de línea estan se habilitan de la siguiente forma.
Algunos modos, como los terminales, es usual que no tengan números de línea en el buffer.

#+BEGIN_SRC emacs-lisp
;; Display line numbers
(column-number-mode)
(global-display-line-numbers-mode t)
;; Disable line numbers for certain modes
(dolist (mode '(eshell-mode-hook
                term-mode-hook
		vterm-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

** Fuentes
  Emacs permite configurar las fuentes de una manera bastante extensiva.
  El siguiente bloque simplemente configura la fuente por defecto.

  #+BEGIN_SRC emacs-lisp
  ;; Font
  (set-face-attribute 'default nil :font "Hack-11")
  (set-frame-font "Hack-11" nil t)
  #+END_SRC

* Variables

** Variable =PATH=
  La variable =load-path= le dice a emacs donde encontrar código de lisp del que tomar funciones, etc.
  Además, se actualiza la variable =PATH= para cargar ejecutables en =~/.local/bin/=.

  #+BEGIN_SRC emacs-lisp
  ;; Set PATH
  (setenv "PATH" (concat (getenv "PATH") "~/.local/bin"))
  (add-to-list 'load-path "~/.emacs.d/custom-elisp")
  #+END_SRC

** Variables locales
Las variables locales son formas de decirle a emacs que cambie une variable para un solo archivo,
el [[cblk-tangle-on-save][bloque de código al inicio]] de este documento es un ejemplo de una variable local.
Lo siguiente se encarga de que las variables locales /siempre/ sean aceptadas,
y de que el código en ellas siempre sea evaluado
(podría ser peligroso si se ejecutan archivos de terceros).

#+BEGIN_SRC emacs-lisp
(setq enable-local-variables :all)
(setq enable-local-eval t)
#+END_SRC

* Archivos de respaldo
Emacs guarda, convenientemente, respaldos de todos los archivos que se editan.
Personalmente, me molesta verlos en el mismo directorio que dichos archivos, así que los muevo todos a un solo lugar.

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . "~/.saves")))
#+END_SRC
* Combinaciones de teclas para funcionalidades vanilla
Lo siguiente cambia las combinaciones de teclas que activan ciertas funciones que vienen por defecto con emacs.
Para ver las combinaciones de teclas asociadas a los paquetes, es necesario ir a esa sección más adelante.

#+BEGIN_SRC emacs-lisp
;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
;; Bind compile to F5 for C
(global-set-key (kbd "<f5>") 'compile)
;; Better bindings for buffer switching
(global-set-key (kbd "C-ñ") 'previous-buffer)
(global-set-key (kbd "C-ç") 'next-buffer)
;; Better window movement
(global-set-key (kbd "C-.") #'other-window)
(global-set-key (kbd "C-,") #'prev-window)
;; Do what i mean shortcuts
(global-set-key (kbd "M-u") 'upcase-dwim)
(global-set-key (kbd "M-l") 'downcase-dwim)
(global-set-key (kbd "M-c") 'capitalize-dwim)
#+END_SRC