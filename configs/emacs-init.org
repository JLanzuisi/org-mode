# -*- eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t) -*-
#+TITLE: Configuración de emacs
#+AUTHOR: Jhonny Lanzuisi
#+TAGS: :emacs:init:
#+LATEX_CLASS: article
#+PROPERTY: header-args :exports code :tangle ~/.emacs.d/init-test.el
#+SETUPFILE: /home/jhonny/git/org-mode/style.css.org
#+LATEX_HEADER: \asignatura{Emacs Lisp}

# ----LICENSE---
# Copyright 2021 Jhonny Lanzuisi (jalb97@gmail.com)
# More source files at github.com/JLanzuisi
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# --------------
‖
Las porciones del tecto encerradas en doble línea vertical,
como esta,
tratan sobre la forma en que se implementa exta configuración en =org-mode=.
Si lo único que le interesa al lector es la configuración de emacs,
pueden ignorarse estas partes del texto sin problemas.

La idea es configurar emacs usando =org-mode=.
=org-mode= permite escribir el código mezclado con texto,
de tal forma que documentar el código es más sencillo.
Además, es más fácil recordar en el futuro que significa alguna pieza de la contiguración si puedo leer lo que pensaba en el momento.

El archivo =init.el= de configuración se crea a partir de un =emacs-init.org= usando =org-babel-tangle=.
Por ahora, no es más que una recopilación de cosas que tomo de otras configuraciones o que descubro en el manual de emacs.

Para poder crear el archivo =init.el=, uso la siguiente linea al inicio del archivo =.org=,
que permite cargar [[* Variables locales][variables locales]]. 
Con esta linea se ejecuta la operación de tangle cada vez que se guarda el archivo.
Y con esto logro que al guardar el archivo =.org= los cambios de guarden también en el =.el=,
si tener que hacerlo manualmente.

#+NAME: cblk-tangle-on-save
#+BEGIN_SRC emacs-lisp :tangle no
# -*- eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t) -*-
#+END_SRC

Además, la siguiente linea hace que sea más conveniente escribir el código en el archivo =.org=,

#+BEGIN_SRC emacs-lisp :tangle no
#+PROPERTY: header-args :exports code :tangle ~/.emacs.d/init-test.el
#+END_SRC

pues establece ciertas opciones que quiero por defecto en practicamente todos los bloques de código.
‖

#+BEGIN_SRC emacs-lisp :exports none
  ;; This init.el file is tangled from an Org file.
  ;; As such, it's documentation will be terse or non-existent.
  ;; For more in-depth, look at the Org or HTML files associated with it.
#+END_SRC

* Apariencia general
Estos comandos se encargar de desactivar ciertos elementos que vienen por defecto en la interfaz de emacs.

#+BEGIN_SRC emacs-lisp
;; Disable welcome screen
(setq inhibit-startup-message t
      initial-buffer-choice  nil)
#+END_SRC

Los nombres de las variables se explican a si mismos, así que no hay mucho más que decir.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)          ; Disable the menu bar
(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room
(setq visible-bell t)       ; Set bell to visible, not sound
#+END_SRC

** Números en la líneas
Los números de línea estan se habilitan de la siguiente forma.
Algunos modos, como los terminales, es usual que no tengan números de línea en el buffer.

#+BEGIN_SRC emacs-lisp
;; Display line numbers
(column-number-mode)
(global-display-line-numbers-mode t)
;; Disable line numbers for certain modes
(dolist (mode '(eshell-mode-hook
                term-mode-hook
		vterm-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

** Fuentes
  Emacs permite configurar las fuentes de una manera bastante extensiva.
  El siguiente bloque simplemente configura la fuente por defecto.

  #+BEGIN_SRC emacs-lisp
  ;; Font
  (set-face-attribute 'default nil :font "Hack-11")
  (set-frame-font "Hack-11" nil t)
  #+END_SRC

* Variables

** Variable =PATH=
  La variable =load-path= le dice a emacs donde encontrar código de lisp del que tomar funciones, etc.
  Además, se actualiza la variable =PATH= para cargar ejecutables en =~/.local/bin/=.

  #+BEGIN_SRC emacs-lisp
  ;; Set PATH
  (setenv "PATH" (concat (getenv "PATH") "~/.local/bin"))
  (add-to-list 'load-path "~/.emacs.d/custom-elisp")
  #+END_SRC

** Variables locales
Las variables locales son formas de decirle a emacs que cambie une variable para un solo archivo,
el [[cblk-tangle-on-save][bloque de código al inicio]] de este documento es un ejemplo de una variable local.
Lo siguiente se encarga de que las variables locales /siempre/ sean aceptadas,
y de que el código en ellas siempre sea evaluado
(podría ser peligroso si se ejecutan archivos de terceros).

#+BEGIN_SRC emacs-lisp
(setq enable-local-variables :all)
(setq enable-local-eval t)
#+END_SRC

* Archivos de respaldo
Emacs guarda, convenientemente, respaldos de todos los archivos que se editan.
Personalmente, me molesta verlos en el mismo directorio que dichos archivos, así que los muevo todos a un solo lugar.

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . "~/.saves")))
#+END_SRC
* Combinaciones de teclas para funcionalidades vanilla
Lo siguiente cambia las combinaciones de teclas que activan ciertas funciones que vienen por defecto con emacs.
Para ver las combinaciones de teclas asociadas a los paquetes, es necesario ir a la sección correspondiente.

#+NAME:src-general-shortcuts
#+BEGIN_SRC emacs-lisp
;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
;; Bind compile to F5 for C
(global-set-key (kbd "<f5>") 'compile)
;; Better bindings for buffer switching
(global-set-key (kbd "C-ñ") 'previous-buffer)
(global-set-key (kbd "C-ç") 'next-buffer)
;; Better window movement
(global-set-key (kbd "C-.") #'other-window)
(global-set-key (kbd "C-,") #'prev-window)
;; Do what i mean shortcuts
(global-set-key (kbd "M-u") 'upcase-dwim)
(global-set-key (kbd "M-l") 'downcase-dwim)
(global-set-key (kbd "M-c") 'capitalize-dwim)
#+END_SRC

Lo siguiente es una mejor manera de cambiar entre las ventanas abiertas de emacs.

#+BEGIN_SRC emacs-lisp
;; Better window movement
(global-set-key (kbd "C-.") #'other-window)
(global-set-key (kbd "C-,") #'prev-window)

(defun prev-window ()
  (interactive)
  (other-window -1))
#+END_SRC

* Configuraciones para código en C

Al escribir código en C,
emacs posee un modo que se encarga automáticamente de casi todo lo que necesito.
La identación es una de las cosas que me interesa cambiar.

Con el siguiente bloque se configura el estilo de la identación
y también se activa la identación automática.
Todo esto junto con el atajo para ='compile=,
configuran el entorno que uso para escribir en C.

#+BEGIN_SRC emacs-lisp
; C stuff
;; Linux line indent style
(setq c-default-style "linux"
          c-basic-offset 4)
;; Auto indent
(add-hook 'c-mode-common-hook '(lambda () (c-toggle-auto-state 1)))
#+END_SRC

* Otros

No insertar una linea al final de las plantillas.

#+BEGIN_SRC emacs-lisp
;; No line after templates
(setq mode-require-final-newline nil)
#+END_SRC

* Configuración inicial para usar paquetes

Comenzamos cargando el administrador de paquetes.

#+BEGIN_SRC emacs-lisp
(require 'package)
#+END_SRC

Sigue la configuración de los sitios web de los que descargar los paquetes.

#+BEGIN_SRC emacs-lisp
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
#+END_SRC

Y, si no hay descripciones de los paquetes, refrescar las descripciones de todas las fuentes.

#+BEGIN_SRC emacs-lisp
(package-initialize)
 (unless package-archive-contents
   (package-refresh-contents))
#+END_SRC

La sección =custom= suele ocupar mucho espacio y no ser muy fácil de leer,
por lo que prefiero colocarlo en otro archivo fuera de la configuración principal.
El siguiente bloque se encarga de esto.

#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/emacs-custom")
(if (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

** Configuración de =use-package=.
El paquete =use-package= permite cargar otros paquetes de una forma ordenada y fácil de leer.
Además el =setq= en el bloque siguiente se encarga de que los paquetes siempre sean descargados si no se encuentran en la instalación local.
Este paquete no se encarga de administrar el resto de paquetes.
Para más información veáse la documentación oficial.

#+BEGIN_SRC emacs-lisp
(require 'use-package)
(setq use-package-always-ensure t)
#+END_SRC

* Tema de Emacs

Uso el tema =modus= en su versión clara.
Desactivar el subyarado de los enlaces es algo esencial.
El resto es opcional, y la documentación oficial hace un buen trabajo en explicarlo.

#+BEGIN_SRC emacs-lisp
;; Theme
(use-package modus-themes
  :config
  (load-theme 'modus-operandi t)
  (setq modus-themes-syntax 'faint)
  (setq modus-themes-links 'no-underline)
  (setq modus-themes-completions 'opinionated))
#+END_SRC

* El adimistrador de archivos =dired=

=Dired= es un componente que viene con emacs por defecto.
Es mi administrador de archivos cuando estoy editando textos.
Lo único que añado a la funcionalidad original de =dired= son dos cosas:

1. Una forma de ir rápidamente de un archivo a su ubicación en el sistema de archivos,usando =dired=, con la función =dired-jump=; y 

2. Unas opciones extras a la forma en que =dired= muestra los archivos, para que agrupe primero las carpetas (es básicamente darle opciones al comando de UNIX =ls= que =dired= utiliza).

#+BEGIN_SRC emacs-lisp
;; Dired
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :custom ((dired-listing-switches "-agho --group-directories-first"))
  :bind
  ("C-x C-j" . dired-jump))
#+END_SRC

* Org Mode
Creo que es imposible resumir lo que =org-mode= /es/.
Personalmente lo uso para casi todo:
archivos de configuración de mi sistema,
escribir artículos de todo tipo,
organizar mis tareas por hacer y
mantener notas de las cosas que quiero hacer y las que he completado.

La configuración de =org-mode= es tan importante para mi uso de Emacs
que es de lejos la parte mas larga de la configuración.
Hasta tal punto es así que tuve que separarla en varias partes,
dejando cosas que tienen que ver con LaTeX en un archivo separado.

La siguiente incantación inicia la configuración de =org-mode=.

#+BEGIN_SRC emacs-lisp
;; Org-mode
(use-package org
#+END_SRC